AWSTemplateFormatVersion: "2010-09-09"
Description: ServiceHub cloud formation template using ALB, EC2, ECR, S3, RDS, SNS, VPC, and CloudFormation.

Parameters:
  VPCName:
    Type: String
    Default: ServiceHubVPC
    Description: Name of the VPC

  DBInstanceIdentifier:
    Type: String
    Default: servicehub-db
    Description: RDS database instance identifier

  DBName:
    Type: String
    Default: servicehubdb
    Description: Name of the database to create

  DBUsername:
    Type: String
    Default: admin
    Description: Master username for RDS

  DBPassword:
    Type: String
    NoEcho: true
    Default: Admin_123
    Description: Master password for RDS

  DBAllocatedStorage:
    Type: Number
    Default: 10
    Description: Allocated storage size for the database (in GB)

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: RDS instance class

  Engine:
    Type: String
    Default: mysql
    AllowedValues:
      - mysql
      - postgres
    Description: Database engine type

  BackendECRImageUri:
    Type: String
    Default: 253860801393.dkr.ecr.us-east-1.amazonaws.com/servicehub:latest
    Description: URI of the backend container image in ECR

  FrontendECRImageUri:
    Type: String
    Default: 253860801393.dkr.ecr.us-east-1.amazonaws.com/servicehub-frontend:latest
    Description: URI of the frontend container image in ECR

  KeyName:
    Type: String
    Default: TermProject
    Description: Name of an existing EC2 KeyPair to enable SSH access

  S3BucketName:
    Type: String
    Default: servicehub-images
    Description: Name of the S3 bucket for storing images

Resources:
  # VPC
  ServiceHubVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ServiceHubVPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServiceHubVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServiceHubVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServiceHubVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServiceHubVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]

  # Public route
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ServiceHubVPC

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private route
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ServiceHubVPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # RDS subnet group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # RDS security group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow database access from EC2
      VpcId: !Ref ServiceHubVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LaunchTemplateSecurityGroup

  # RDS instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref Engine
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup

  # Target group
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-target-group
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref ServiceHubVPC
      HealthCheckPort: "8080"
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 20
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: backend-target-group

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: frontend-target-group
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref ServiceHubVPC
      HealthCheckPort: "3000"
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 20
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: frontend-target-group

  # Load balancer security group
  BackendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: backend-load-balancer-sg
      GroupDescription: Enable SSH access and HTTP via port 80
      VpcId: !Ref ServiceHubVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  FrontendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: frontend-load-balancer-sg
      GroupDescription: Enable SSH access and HTTP via port 80
      VpcId: !Ref ServiceHubVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  # Load balancer
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: backend-load-balancer
      Scheme: internet-facing
      IpAddressType: ipv4
      Type: application
      SecurityGroups:
        - !Ref BackendLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: frontend-load-balancer
      Scheme: internet-facing
      IpAddressType: ipv4
      Type: application
      SecurityGroups:
        - !Ref FrontendLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # Load balancer listener
  BackendLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP

  FrontendLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch template security group
  LaunchTemplateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: servicehub-launch-template-sg
      GroupDescription: Security group for launch template
      VpcId: !Ref ServiceHubVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  # Instance profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - LabRole

  # Launch template
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: backend-launch-template
      LaunchTemplateData:
        ImageId: ami-0166fe664262f664c
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref LaunchTemplateSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras enable docker
            sudo yum install -y docker aws-cli
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo service docker start
            
            # Login
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            
            # Pull image
            docker pull ${BackendECRImageUri}
            
            # Run
            docker run -d -p 8080:8080 \
              -e DB_URL=jdbc:mysql://${RDSInstance.Endpoint.Address}:3306/${DBName} \
              -e DB_USERNAME=${DBUsername} \
              -e DB_PASSWORD=${DBPassword} \
              -e S3_BUCKET_NAME=${S3BucketName} \
              -e AWS_ACCOUNT_ID=${AWS::AccountId} \
              -e AWS_REGION=${AWS::Region} \
              -e AWS_ACCESS=<ACCESS_KEY> \
              -e AWS_SECRET=<SECRET_KEY> \
              -e AWS_SESSION_TOKEN=<SESSION_TOKEN> \
              ${BackendECRImageUri}
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: backend-launch-template

  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: frontend-launch-template
      LaunchTemplateData:
        ImageId: ami-0166fe664262f664c
        InstanceType: t2.medium
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref LaunchTemplateSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras enable docker
            sudo yum install -y docker aws-cli
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo service docker start

            # Login
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

            # Pull image
            docker pull ${FrontendECRImageUri}

            # Run
            docker run -d -p 3000:3000 \
              -e REACT_APP_SERVER_URL=http://${BackendLoadBalancer.DNSName} \
              ${FrontendECRImageUri}
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: backend-launch-template

  # Auto-scaling group
  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: backend-auto-scaling-group
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 500
      TargetGroupARNs:
        - !Ref BackendTargetGroup
      Tags:
        - Key: Name
          Value: backend-auto-scaling-group
          PropagateAtLaunch: true

  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: frontend-auto-scaling-group
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 500
      TargetGroupARNs:
        - !Ref FrontendTargetGroup
      Tags:
        - Key: Name
          Value: frontend-auto-scaling-group
          PropagateAtLaunch: true

  # S3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource:
              Fn::Sub: 'arn:aws:s3:::${S3BucketName}/*'

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref ServiceHubVPC
      RouteTableIds:
        - !Ref PublicRouteTable

Outputs:
  FrontendURL:
    Description: URL of the Frontend Application
    Value: !Sub "http://${FrontendLoadBalancer.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-FrontendURL"
